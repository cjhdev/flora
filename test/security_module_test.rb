require 'minitest/autorun'
require 'flora'
require 'logger'
require 'securerandom'

describe "SecurityModule" do

  let(:sm) do      
      Flora::SecurityModule.new(keys)
    end

  describe "#mic" do

    describe "mlen0" do

      let(:keys) do
        {
          nwk: [[0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c].pack("C*")].pack("m")
        }
      end
      
      let(:input){""}
      let(:expected){"\xbb\x1d\x69\x29".unpack("L<").first}
      
      it "should match expected" do
        assert_equal expected, sm.mic(:nwk, input)
      end
      
    end
    
    describe "mlen128" do
    
      let(:keys) do
        {
          nwk: [[0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c].pack("C*")].pack("m")
        }
      end
      
      let(:input){[0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a].pack("C*")}
      let(:expected){"\x07\x0a\x16\xb4".unpack("L<").first}
      
      it "should match expected" do
        assert_equal expected, sm.mic(:nwk, input)
      end
    
    end
    
    describe "mlen320" do
    
      let(:keys) do
        {
          nwk: [[0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c].pack("C*")].pack("m")
        }
      end
      
      let(:input){[0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11].pack("C*")}
      let(:expected){"\xdf\xa6\x67\x47".unpack("L<").first}
      
      it "should match expected" do
        assert_equal expected, sm.mic(:nwk, input)
      end
    
    end
    
    describe "mlen320_parts" do
    
      let(:keys) do
        {
          nwk: [[0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c].pack("C*")].pack("m")
        }
      end
      
      let(:input1){[0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f].pack("C*")}
      let(:input2){[0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11].pack("C*")}
      let(:expected){"\xdf\xa6\x67\x47".unpack("L<").first}
      
      it "should match expected" do
        assert_equal expected, sm.mic(:nwk, input1, input2)
      end
    
    end
    
  end

end
